<%- include('../partials/admin/header.ejs') %>
<header>
    <%- include('../partials/admin/navbar.ejs') %>
</header>
<div class="row">
    <%- include('../partials/admin/sidebar.ejs') %>
    <div class="cover" style="background-color: transparent;">
      <div class="dashboard-container">
        <div class="row">
          <div class="chart-container">
            <div class="title">Monthly Sales</div>
            <div class="sales" id="sales-amount"></div>
            <canvas id="salesChart"></canvas>
          </div>

          <div class="chart-container">
            <div class="title">Monthly Users</div>
            <div class="sales" id="user-count"></div>
            <canvas id="userChart"></canvas>
          </div>

          <div class="chart-container">
            <div class="title">Monthly Orders</div>
            <div class="sales" id="order-count"></div>
            <canvas id="orderChart"></canvas>
          </div>
        </div>

        <div class="chart-container">
          <div class="cover-head">
            <h2>Recent Orders</h2>
            <a href="/admin/orders" class="button">View all</a>
          </div>
          <table>
            
            <thead style="background-color: transparent; border: none;">
              <tr>
                <th>Order</th>
                <th>Customer</th>
                <th>Date</th>
                <th>Total</th>
                <th>Status</th>
              </tr>
            </thead>
            <tbody id="order-table">

            </tbody>
          </table>
        </div>
      </div>
    </div>
</div>

<script>
  const get_random_color = () => {
    const r = Math.floor(Math.random() * 256); 
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    return `rgb(${r}, ${g}, ${b})`;
  };


  const get_data_from_server = async () => {
    try {
      const response = await fetch('/admin/get-reports', {
        method: 'POST'
      });
      return await response.json();
    } catch (error) {
      console.error(error);
      return null;
    }
  };
  
  const parse_date = (raw_data) => {
    const labels = raw_data.map(data => {
      const month_names = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
      return `${month_names[data.month - 1]} ${data.year}`;
    });
    return labels;
  }
  const plot_sales_data = async () => {
    let raw_data = await get_data_from_server();
    console.log(raw_data)
    const ctx = document.getElementById('salesChart').getContext('2d');
    const color = get_random_color();
    const data = {
      labels: raw_data.sales_data.map(data => data.date),
      datasets: [{
        label: 'Daily Sales',
        data: raw_data.sales_data.map(data => data.total_amount),
        backgroundColor: color,
        borderColor: color,
        borderWidth: 1,
        borderRadius: 5,
      }],
    };

    new Chart(ctx, {
      type: 'bar',
      data: data,
      options: {
        responsive: true,
        scales: {
          x: {
            grid: {
              display: false,
            },
          },
          y: {
            beginAtZero: true,
            grid: {
              display: false,
            },
          }
        },
        barThickness: 20,
        categoryPercentage: 0.7,
      }
    });
    const sales_amount = document.getElementById('sales-amount');
    const total_amount = raw_data.sales_data.reduce((acc, cur) => {
      return acc + cur.total_amount;
    }, 0)
    sales_amount.innerHTML = `&#8377; ${total_amount}`;
    plot_user_data(raw_data);
    plot_order_data(raw_data);
    if (raw_data.orders && raw_data.orders.length > 0) {
      plot_orders(raw_data.orders)
    }
  };

  const plot_user_data = (raw_data) => {
    const ctx = document.getElementById('userChart').getContext('2d');
    const data = {
      labels: raw_data.user_data.map((data, index) => `Week ${index + 1}`),
      datasets: [{
        label: 'Users',
        data: raw_data.user_data.map(data => data.user_count),
        backgroundColor: get_random_color(),
        fill: false
      }],
    };

    new Chart(ctx, {
      type: 'line',
      data: data,
      options: {
        responsive: true,
        scales: {
          x: {
            grid: {
              display: false,
            },
          },
          y: {
            beginAtZero: true,
            grid: {
              display: false,
            },
          }
        },
      }
    });

    const user_element = document.getElementById('user-count');
    const total_user = raw_data.user_data.reduce((acc, cur) => {
      return acc + cur.user_count;
    }, 0)
    user_element.textContent = `No of users : ${total_user}`;
  };


  const plot_order_data = (raw_data) => {
    const ctx = document.getElementById('orderChart').getContext('2d');
    const data = {
      labels: raw_data.order_data.map(order => `${order.status.charAt(0).toUpperCase()}${order.status.slice(1)}`),
      datasets: [{
        label: 'Orders',
        data: raw_data.order_data.map(order => order.order_count),
        backgroundColor: raw_data.order_data.map(order => get_random_color()),
        borderWidth: 1,
        borderRadius: 5,
      }],
      hoverOffset: 4,
    };
    new Chart(ctx, {
      type: 'doughnut',
      data: data,
      options: {
        responsive: true,
        plugins: {
          legend: {
            position: 'top',
          },
        },
      },
      cutout: '70%'
    })
    const order_element = document.getElementById('order-count');
    const total_orders = raw_data.order_data.reduce((acc, cur) => {
      return acc + cur.order_count;
    }, 0)
    order_element.textContent = `Total Orders : ${total_orders}`;
  };

  const plot_orders = (raw_data) => {
    const orders_table = document.getElementById('order-table');
    raw_data.forEach(order => {
      const row = document.createElement('tr');
      row.innerHTML = `
        <td style="display: flex; max-width: 500px">${order.name}</td>
        <td>${order.user_id.first_name} ${order.user_id.last_name}</td>
        <td>${formatDate(order.createdAt)}</td>
        <td>&#8377;${order.price}</td>
        <td class="state-button ${order.status} label">${order.status.charAt(0).toUpperCase()}${order.status.slice(1)}</td>
      `;
      orders_table.appendChild(row);
    });
  }

  plot_sales_data();
</script>
<%- include('../partials/admin/footer.ejs') %>
<%- include('../partials/admin/header.ejs') %>
<header>
    <%- include('../partials/admin/navbar.ejs') %>
</header>
<div class="row">
    <%- include('../partials/admin/sidebar.ejs') %>
    <div class="cover" style="background-color: transparent;">
      <div class="dashboard-container">
        <div class="filter-section">
          <div class="dropdown-container">
            <button class="filter-button" onclick="toggleDropdown()">
              Filter
              <svg class="arrow-icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="16px" height="16px"><path d="M233.4 406.6c12.5 12.5 32.8 12.5 45.3 0l192-192c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L256 338.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l192 192z"/></svg>
            </button>
              <div class="dropdown-menu" id="dropdownMenu">
                  <div class="dropdown-item" onclick="applyFilter('today')">Today</div>
                  <div class="dropdown-item" onclick="applyFilter('week')">Week</div>
                  <div class="dropdown-item" onclick="applyFilter('month')">Month</div>
                  <div class="dropdown-item" onclick="applyFilter('year')">Year</div>
              </div>
          </div>
        </div>
        <div class="stats-container">
          <div class="dashboard-card">
              <div class="icon">ðŸ“¦</div>
              <div class="card-title"><span id="order-dated">Today</span>'s Sales</div>
              <div class="card-value" id="order-count">0</div>
              <div class="card-description">We have sold <span id="semi-orders">0</span> items</div>
          </div>
  
          <div class="dashboard-card">
              <div class="icon">ðŸ’°</div>
              <div class="card-title"><span id="revenue-dated">Today</span>'s Revenue</div>
              <div class="card-value" id="sales-amount">â‚¹0</div>
              <div class="card-description">Profit made so far</div>
          </div>

          <div class="dashboard-card">
              <div class="icon">ðŸ‘¥</div>
              <div class="card-title">Users Count</div>
              <div class="card-value" id="user-count">0</div>
              <div class="card-description">Total users signed up</div>
          </div>
      </div>
      <div class="stats-container">
        <div class="dashboard-card" style="width: 100%;">
          <canvas id="salesChart"></canvas>
        </div>
      </div>

      <div class="stats-container">
        <div class="dashboard-card" style="width: 100%;">
          <div class="card-title">Top Selling Products</div>
          <div id="top-product"></div>
        </div>
      </div>

      <div class="stats-container">
        <div class="dashboard-card" style="width: 49%;">
          <div class="card-title">Top Selling Categories</div>
          <div id="top-category"></div>
        </div>

        <div class="dashboard-card" style="width: 49%;">
          <div class="card-title">Top Selling Brands</div>
          <div id="top-brands"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let start_date = new Date();
  let end_date = new Date();
  let filter_type = 'today';
  let chart;

  const get_random_color = () => {
    const r = Math.floor(Math.random() * 256); 
    const g = Math.floor(Math.random() * 256);
    const b = Math.floor(Math.random() * 256);
    return `rgb(${r}, ${g}, ${b})`;
  };


  const get_data_from_server = async () => {
    try {
        const response = await fetch('/admin/get-reports', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                start_date: start_date.toISOString(),
                end_date: end_date.toISOString(),
            }),
        });

        if (!response.ok) {
            throw new Error(`HTTP error! Status: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('Error fetching data from server:', error);
        return null;
    }
  };
  
  function getMonthName(monthIndex) {
        const months = [
            "Jan", "Feb", "Mar", "Apr", "May", "June", 
            "July", "Aug", "Sept", "Oct", "Nov", "Dec"
        ];
        return months[monthIndex];
  }


  const plot_sales_data = async () => {
    let raw_data = await get_data_from_server();
    console.log(raw_data)

    if (chart) {
      chart.destroy();
    }

    let groupedData = [];

    raw_data.sales_data.forEach(item => {
        const date = new Date(item.date);
        let groupKey = "";

        if (filter_type === "day" || filter_type == "week" || filter_type === "month" ) {
            groupKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, "0")}-${date.getDate().toString().padStart(2, "0")}`;
        }

        if (filter_type == "year") {
            groupKey = `${getMonthName(date.getMonth())}`;
        }
        let group = groupedData.find(group => group.key === groupKey);

        if (group) {
            group.total_amount += item.total_amount;
        } else {
            groupedData.push({
                key: groupKey,
                total_amount: item.total_amount
            });
        }
    });


    const ctx = document.getElementById('salesChart').getContext('2d');
    const color = get_random_color();
    let total_amounts;
    if (filter_type === "year") {
      total_amounts = [raw_data.sales_data.reduce((sum, item) => sum + item.total_amount, 0)];
    } else {
      total_amounts = raw_data.sales_data.map(data => data.total_amount);
    }
    const data = {
        labels: groupedData.map((data) => data.key),
        datasets: [{
          label: 'Sales',
          data: total_amounts,
          backgroundColor: color,
          borderColor: color,
          borderWidth: 1,
          borderRadius: 5,
        }],
    };

    chart = new Chart(ctx, {
      type: 'bar',
      data: data,
      options: {
        responsive: true,
        scales: {
          x: {
            grid: {
              display: false,
            },
          },
          y: {
            beginAtZero: true,
            grid: {
              display: false,
            },
          }
        },
        barThickness: 20,
        categoryPercentage: 0.7,
      }
    });
    const sales_amount = document.getElementById('sales-amount');
    const total_amount = raw_data.sales_data.reduce((acc, cur) => {
      return acc + cur.total_amount;
    }, 0)
    sales_amount.innerHTML = `${formatCurrency(total_amount)}`;
    plot_user_data(raw_data);
    plot_order_data(raw_data);
    raw_data.orders && raw_data.orders.length > 0 ? plot_tops(raw_data.orders[0]): '';
  };

  const plot_user_data = (raw_data) => {
    const user_element = document.getElementById('user-count');
    const total_user = raw_data.user_data.reduce((acc, cur) => {
      return acc + cur.user_count;
    }, 0)
    user_element.textContent = `${total_user}`;
  };


  const plot_order_data = (raw_data) => {
    const order_element = document.getElementById('order-count');
    const semi_orders = document.getElementById('semi-orders');
    const total_orders = raw_data.order_data.reduce((acc, cur) => {
      return acc + cur.order_count;
    }, 0)
    order_element.textContent = `${total_orders}`;
    semi_orders.textContent = `${total_orders}`;
  };

  const plot_tops = (raw_data) => {
    console.log(raw_data)
    const top_products = document.getElementById('top-product');
    const top_categories = document.getElementById('top-category');
    const top_brands = document.getElementById('top-brands');
    top_products.innerHTML = "";
    top_categories.innerHTML = "";
    top_brands.innerHTML = "";

    const product_ul = document.createElement('ul');
    product_ul.classList.add('top-lists');
    raw_data.product_counts.forEach(product => {
      const product_li = document.createElement('li');
      product_li.classList.add('top-item');
      product_li.innerHTML = `<span class="product-name">${product.product_name}</span> 
      <span class="product-count">${product.product_count}</span>`
      product_ul.appendChild(product_li);
    });
    top_products.appendChild(product_ul);

    const category_ul = document.createElement('ul');
    category_ul.classList.add('top-lists');
    raw_data.category_counts.forEach(category => {
      const category_li = document.createElement('li');
      category_li.classList.add('top-item');
      category_li.innerHTML = `<span class="category-name">${category.category}</span> 
      <span class="category-count">${category.category_count}</span>`
      category_ul.appendChild(category_li);
    });
    top_categories.appendChild(category_ul);

    const brand_ul = document.createElement('ul');
    brand_ul.classList.add('top-lists');
    raw_data.brand_counts.forEach(brand => {
      const brand_li = document.createElement('li');
      brand_li.classList.add('top-item');
      brand_li.innerHTML = `<span class="brand-name">${brand.brand}</span> 
      <span class="brand-count">${brand.brand_count}</span>`
      brand_ul.appendChild(brand_li);
    });
    top_brands.appendChild(brand_ul);
  }

  function toggleDropdown() {
      const dropdown = document.getElementById('dropdownMenu');
      const arrowIcon = document.querySelector('.arrow-icon');
      dropdown.classList.toggle('active');
      arrowIcon.classList.toggle('rotate');
  }

  function applyFilter(filterType) {
      if (filterType == "today") {
        start_date = new Date();
        end_date = new Date();
        start_date.setUTCHours(0, 0, 0);
        end_date.setUTCHours(23, 59, 59);
        document.getElementById("order-dated").textContent = "Today";
        document.getElementById("revenue-dated").textContent = "Today";
        filter_type = "today";
      } else if (filterType == "week") {
        start_date = new Date();
        let day = start_date.getDay() || 7;
        if (day !== 1) start_date.setHours(-24 * (day - 1));
        start_date.setHours(0, 0, 0);
        document.getElementById("order-dated").textContent = "This Week";
        document.getElementById("revenue-dated").textContent = "This Week";
        filter_type = "week";
      } else if (filterType == "month") {
        start_date = new Date();
        start_date.setDate(1);
        start_date.setHours(0, 0, 0);
        document.getElementById("order-dated").textContent = "This Month";
        document.getElementById("revenue-dated").textContent = "This Month";
        filter_type = "month";
      } else if  (filterType == "year") {
        start_date = new Date();
        start_date.setMonth(0, 1);
        start_date.setHours(0, 0, 0);
        document.getElementById("order-dated").textContent = "This Year";
        document.getElementById("revenue-dated").textContent = "This Year";
        filter_type = "year";
      }
      plot_sales_data();
      toggleDropdown();
  }

  document.addEventListener('click', function (event) {
      const dropdown = document.getElementById('dropdownMenu');
      const filterButton = document.querySelector('.filter-button');
      if (!dropdown.contains(event.target) && !filterButton.contains(event.target)) {
          dropdown.classList.remove('active');
      }
  });

  plot_sales_data();
</script>
<%- include('../partials/admin/footer.ejs') %>
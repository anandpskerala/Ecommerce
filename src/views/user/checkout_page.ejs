<%- include('../partials/user/header.ejs') %>
<header>
    <%- include('../partials/user/navbar.ejs') %>
</header>
<div class="checkout-container">
    <div class="address-manager">
        <h2>Select Address</h2>
        <div id="address-list">
        </div>
        <div class="add-button-section">
            <button class="add-btn" onclick="add_address()">+ Add Address</button>
        </div>

        <form id="address-form">
            <h3 id="form-title">Add Address</h3>
            <label for="house_address">House Address</label>
            <input id="house_address" class="address-input" type="text" name="house_address" placeholder="Enter your house address" data-validate="required">
            <span class="form-error"></span>
            <label for="steet_address">Street Address</label>
            <input id="street_address" class="address-input" type="text" name="street_address" placeholder="Enter your street address" data-validate="required">
            <span class="form-error"></span>
            <div class="group">
                <div class="col">
                    <label for="city">City</label>
                    <input id="city" class="address-input" type="text" name="city" placeholder="Enter your city" data-validate="required">
                    <span class="form-error"></span>
                </div>

                <div class="col">
                    <label for="state">State</label>
                    <input id="state" class="address-input" type="text" name="state" placeholder="Enter your state" data-validate="required">
                    <span class="form-error"></span>
                </div>
            </div>
            <div class="group">
                <div class="col">
                    <label for="zip_code">Zip Code</label>
                    <input id="zip_code" class="address-input" type="text" name="zip_code" placeholder="Enter your zip code" data-validate="required|numberonly">
                    <span class="form-error"></span>
                </div>
                <div class="col">
                    <label for="country">Country</label>
                    <select class="address-input" autocomplete="country" id="country" name="country" data-validate="required">
                        <option value="">Select Country</option>
                        <option value="AF">Afghanistan</option>
                        <option value="AX">Åland Islands</option>
                        <option value="AL">Albania</option>
                        <option value="DZ">Algeria</option>
                        <option value="AS">American Samoa</option>
                        <option value="AD">Andorra</option>
                        <option value="AO">Angola</option>
                        <option value="AI">Anguilla</option>
                        <option value="AQ">Antarctica</option>
                        <option value="AG">Antigua and Barbuda</option>
                        <option value="AR">Argentina</option>
                        <option value="AM">Armenia</option>
                        <option value="AW">Aruba</option>
                        <option value="AU">Australia</option>
                        <option value="AT">Austria</option>
                        <option value="AZ">Azerbaijan</option>
                        <option value="BS">Bahamas</option>
                        <option value="BH">Bahrain</option>
                        <option value="BD">Bangladesh</option>
                        <option value="BB">Barbados</option>
                        <option value="BY">Belarus</option>
                        <option value="BE">Belgium</option>
                        <option value="BZ">Belize</option>
                        <option value="BJ">Benin</option>
                        <option value="BM">Bermuda</option>
                        <option value="BT">Bhutan</option>
                        <option value="BO">Bolivia (Plurinational State of)</option>
                        <option value="BA">Bosnia and Herzegovina</option>
                        <option value="BW">Botswana</option>
                        <option value="BV">Bouvet Island</option>
                        <option value="BR">Brazil</option>
                        <option value="IO">British Indian Ocean Territory</option>
                        <option value="BN">Brunei Darussalam</option>
                        <option value="BG">Bulgaria</option>
                        <option value="BF">Burkina Faso</option>
                        <option value="BI">Burundi</option>
                        <option value="CV">Cabo Verde</option>
                        <option value="KH">Cambodia</option>
                        <option value="CM">Cameroon</option>
                        <option value="CA">Canada</option>
                        <option value="BQ">Caribbean Netherlands</option>
                        <option value="KY">Cayman Islands</option>
                        <option value="CF">Central African Republic</option>
                        <option value="TD">Chad</option>
                        <option value="CL">Chile</option>
                        <option value="CN">China</option>
                        <option value="CX">Christmas Island</option>
                        <option value="CC">Cocos (Keeling) Islands</option>
                        <option value="CO">Colombia</option>
                        <option value="KM">Comoros</option>
                        <option value="CG">Congo</option>
                        <option value="CD">Congo, Democratic Republic of the</option>
                        <option value="CK">Cook Islands</option>
                        <option value="CR">Costa Rica</option>
                        <option value="HR">Croatia</option>
                        <option value="CU">Cuba</option>
                        <option value="CW">Curaçao</option>
                        <option value="CY">Cyprus</option>
                        <option value="CZ">Czech Republic</option>
                        <option value="CI">Côte d'Ivoire</option>
                        <option value="DK">Denmark</option>
                        <option value="DJ">Djibouti</option>
                        <option value="DM">Dominica</option>
                        <option value="DO">Dominican Republic</option>
                        <option value="EC">Ecuador</option>
                        <option value="EG">Egypt</option>
                        <option value="SV">El Salvador</option>
                        <option value="GQ">Equatorial Guinea</option>
                        <option value="ER">Eritrea</option>
                        <option value="EE">Estonia</option>
                        <option value="SZ">Eswatini (Swaziland)</option>
                        <option value="ET">Ethiopia</option>
                        <option value="FK">Falkland Islands (Malvinas)</option>
                        <option value="FO">Faroe Islands</option>
                        <option value="FJ">Fiji</option>
                        <option value="FI">Finland</option>
                        <option value="FR">France</option>
                        <option value="GF">French Guiana</option>
                        <option value="PF">French Polynesia</option>
                        <option value="TF">French Southern Territories</option>
                        <option value="GA">Gabon</option>
                        <option value="GM">Gambia</option>
                        <option value="GE">Georgia</option>
                        <option value="DE">Germany</option>
                        <option value="GH">Ghana</option>
                        <option value="GI">Gibraltar</option>
                        <option value="GR">Greece</option>
                        <option value="GL">Greenland</option>
                        <option value="GD">Grenada</option>
                        <option value="GP">Guadeloupe</option>
                        <option value="GU">Guam</option>
                        <option value="GT">Guatemala</option>
                        <option value="GG">Guernsey</option>
                        <option value="GN">Guinea</option>
                        <option value="GW">Guinea-Bissau</option>
                        <option value="GY">Guyana</option>
                        <option value="HT">Haiti</option>
                        <option value="HM">Heard Island and Mcdonald Islands</option>
                        <option value="HN">Honduras</option>
                        <option value="HK">Hong Kong</option>
                        <option value="HU">Hungary</option>
                        <option value="IS">Iceland</option>
                        <option value="IN">India</option>
                        <option value="ID">Indonesia</option>
                        <option value="IR">Iran</option>
                        <option value="IQ">Iraq</option>
                        <option value="IE">Ireland</option>
                        <option value="IM">Isle of Man</option>
                        <option value="IL">Israel</option>
                        <option value="IT">Italy</option>
                        <option value="JM">Jamaica</option>
                        <option value="JP">Japan</option>
                        <option value="JE">Jersey</option>
                        <option value="JO">Jordan</option>
                        <option value="KZ">Kazakhstan</option>
                        <option value="KE">Kenya</option>
                        <option value="KI">Kiribati</option>
                        <option value="KP">Korea, North</option>
                        <option value="KR">Korea, South</option>
                        <option value="XK">Kosovo</option>
                        <option value="KW">Kuwait</option>
                        <option value="KG">Kyrgyzstan</option>
                        <option value="LA">Lao People's Democratic Republic</option>
                        <option value="LV">Latvia</option>
                        <option value="LB">Lebanon</option>
                        <option value="LS">Lesotho</option>
                        <option value="LR">Liberia</option>
                        <option value="LY">Libya</option>
                        <option value="LI">Liechtenstein</option>
                        <option value="LT">Lithuania</option>
                        <option value="LU">Luxembourg</option>
                        <option value="MO">Macao</option>
                        <option value="MK">Macedonia North</option>
                        <option value="MG">Madagascar</option>
                        <option value="MW">Malawi</option>
                        <option value="MY">Malaysia</option>
                        <option value="MV">Maldives</option>
                        <option value="ML">Mali</option>
                        <option value="MT">Malta</option>
                        <option value="MH">Marshall Islands</option>
                        <option value="MQ">Martinique</option>
                        <option value="MR">Mauritania</option>
                        <option value="MU">Mauritius</option>
                        <option value="YT">Mayotte</option>
                        <option value="MX">Mexico</option>
                        <option value="FM">Micronesia</option>
                        <option value="MD">Moldova</option>
                        <option value="MC">Monaco</option>
                        <option value="MN">Mongolia</option>
                        <option value="ME">Montenegro</option>
                        <option value="MS">Montserrat</option>
                        <option value="MA">Morocco</option>
                        <option value="MZ">Mozambique</option>
                        <option value="MM">Myanmar (Burma)</option>
                        <option value="NA">Namibia</option>
                        <option value="NR">Nauru</option>
                        <option value="NP">Nepal</option>
                        <option value="NL">Netherlands</option>
                        <option value="AN">Netherlands Antilles</option>
                        <option value="NC">New Caledonia</option>
                        <option value="NZ">New Zealand</option>
                        <option value="NI">Nicaragua</option>
                        <option value="NE">Niger</option>
                        <option value="NG">Nigeria</option>
                        <option value="NU">Niue</option>
                        <option value="NF">Norfolk Island</option>
                        <option value="MP">Northern Mariana Islands</option>
                        <option value="NO">Norway</option>
                        <option value="OM">Oman</option>
                        <option value="PK">Pakistan</option>
                        <option value="PW">Palau</option>
                        <option value="PS">Palestine</option>
                        <option value="PA">Panama</option>
                        <option value="PG">Papua New Guinea</option>
                        <option value="PY">Paraguay</option>
                        <option value="PE">Peru</option>
                        <option value="PH">Philippines</option>
                        <option value="PN">Pitcairn Islands</option>
                        <option value="PL">Poland</option>
                        <option value="PT">Portugal</option>
                        <option value="PR">Puerto Rico</option>
                        <option value="QA">Qatar</option>
                        <option value="RE">Reunion</option>
                        <option value="RO">Romania</option>
                        <option value="RU">Russian Federation</option>
                        <option value="RW">Rwanda</option>
                        <option value="BL">Saint Barthelemy</option>
                        <option value="SH">Saint Helena</option>
                        <option value="KN">Saint Kitts and Nevis</option>
                        <option value="LC">Saint Lucia</option>
                        <option value="MF">Saint Martin</option>
                        <option value="PM">Saint Pierre and Miquelon</option>
                        <option value="VC">Saint Vincent and the Grenadines</option>
                        <option value="WS">Samoa</option>
                        <option value="SM">San Marino</option>
                        <option value="ST">Sao Tome and Principe</option>
                        <option value="SA">Saudi Arabia</option>
                        <option value="SN">Senegal</option>
                        <option value="RS">Serbia</option>
                        <option value="CS">Serbia and Montenegro</option>
                        <option value="SC">Seychelles</option>
                        <option value="SL">Sierra Leone</option>
                        <option value="SG">Singapore</option>
                        <option value="SX">Sint Maarten</option>
                        <option value="SK">Slovakia</option>
                        <option value="SI">Slovenia</option>
                        <option value="SB">Solomon Islands</option>
                        <option value="SO">Somalia</option>
                        <option value="ZA">South Africa</option>
                        <option value="GS">South Georgia and the South Sandwich Islands</option>
                        <option value="SS">South Sudan</option>
                        <option value="ES">Spain</option>
                        <option value="LK">Sri Lanka</option>
                        <option value="SD">Sudan</option>
                        <option value="SR">Suriname</option>
                        <option value="SJ">Svalbard and Jan Mayen</option>
                        <option value="SE">Sweden</option>
                        <option value="CH">Switzerland</option>
                        <option value="SY">Syria</option>
                        <option value="TW">Taiwan</option>
                        <option value="TJ">Tajikistan</option>
                        <option value="TZ">Tanzania</option>
                        <option value="TH">Thailand</option>
                        <option value="TL">Timor-Leste</option>
                        <option value="TG">Togo</option>
                        <option value="TK">Tokelau</option>
                        <option value="TO">Tonga</option>
                        <option value="TT">Trinidad and Tobago</option>
                        <option value="TN">Tunisia</option>
                        <option value="TR">Turkey (Türkiye)</option>
                        <option value="TM">Turkmenistan</option>
                        <option value="TC">Turks and Caicos Islands</option>
                        <option value="TV">Tuvalu</option>
                        <option value="UM">U.S. Outlying Islands</option>
                        <option value="UG">Uganda</option>
                        <option value="UA">Ukraine</option>
                        <option value="AE">United Arab Emirates</option>
                        <option value="GB">United Kingdom</option>
                        <option value="US">United States</option>
                        <option value="UY">Uruguay</option>
                        <option value="UZ">Uzbekistan</option>
                        <option value="VU">Vanuatu</option>
                        <option value="VA">Vatican City Holy See</option>
                        <option value="VE">Venezuela</option>
                        <option value="VN">Vietnam</option>
                        <option value="VG">Virgin Islands, British</option>
                        <option value="VI">Virgin Islands, U.S</option>
                        <option value="WF">Wallis and Futuna</option>
                        <option value="EH">Western Sahara</option>
                        <option value="YE">Yemen</option>
                        <option value="ZM">Zambia</option>
                        <option value="ZW">Zimbabwe</option>
                    </select>
                    <span class="form-error"></span>
                </div>
            </div>
            <div class="form-actions">
                <button class="save-btn" type="submit">Save</button>
                <button class="cancel-btn" type="button" onclick="cancel_edit()">Cancel</button>
            </div>
        </form>
    </div>

    <!-- Order Summary -->
    <div class="order-summary">
        <h3>Your Order</h3>
        <div class="in-cart">
            <div class="in-cart-products" id="in-cart">
            </div>
            <a href="/user/carts" class="button">Edit cart</a>
        </div>
    <hr class="divider">
    <div class="radio-group">
        <h3>Payment Methods</h3>

        <div class="radio-group-box">
            <label class="radio-container">
              <input type="radio" name="payment" value="razorpay" checked>
              <span class="radio-label">RazorPay</span>
              <span class="radio-mark"></span>
            </label>
            <label class="radio-container">
              <input type="radio" name="payment" value="wallet">
              <span class="radio-label">Wallet</span>
              <span class="radio-mark"></span>
            </label>
            <label class="radio-container">
              <input type="radio" name="payment" value="cod">
              <span class="radio-label">Cash On Delivery</span>
              <span class="radio-mark"></span>
            </label>
        </div>
      </div>
    <hr class="divider">
    <div class="coupon-section">
        <div style="display: flex; flex-direction: column; width: 60%;">
            <input id="coupon-code" type="text" placeholder="Coupon Code" style="width: 100%;" data-validate="required">
            <span class="form-error"></span>
        </div>
        <button id="coupon-button" class="button"></button>
    </div>
    <div id="couponModal" class="modal">
        <div class="modal-content">
            <span class="close-btn" onclick="closeModal()">&times;</span>
            <h2>Available Coupons</h2>
            <br>
            <div id="couponsContainer" class="coupons-container">
            </div>
        </div>
    </div>
    <div style="display: flex; flex-direction: row; gap: 5px; font-size: 14px;">
        <span>Get a coupon.</span>
        <button onclick="openModal()" style="color: rgb(0, 85, 255); border: none; background-color: transparent; cursor: pointer;">Show Available Coupons</button>
    </div>
    <hr class="divider">
    <ul id="cost">
    </ul>
    <button class="add-to-cart" type="button" onclick='place_order("", "pending")'>Place Order</button>
    </div>
</div>
<script>
    let editId = null;
    let product_in_cart = [];
    const address_form = document.getElementById('address-form');
    let phone;
    let user_id;
    let total_price = 0;

    const add_address = () => {
        document.getElementById('form-title').innerText = 'Add Address';
        Array.from(address_form.elements).forEach((input) => {
            if (input.value && input.name) {
                input.value = '';
            }
        });
        address_form.style.display = 'flex';
        address_form.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }


    const edit_address = (index) => {
        const address = document.getElementById(`address-${index}`);
        let data_element = address.nextElementSibling
        const data = JSON.parse(data_element.value)
        document.getElementById('form-title').innerText = 'Edit Address';
        Array.from(address_form.elements).forEach((input) => {
            if (input.name) {
                input.value = data[input.name];
            }
        });
        editId = data._id;
        address_form.style.display = 'flex';
        address_form.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }


    address_form.addEventListener('submit', async (e) => {
        e.preventDefault();
        let isValid = true;
        let data = {};
        Array.from(address_form.elements).forEach((input) => {
            if (!handleValidation(input)) {
                isValid = false;
            } else {
                data[input.name] = input.value;
            }
        });
        if (!isValid) return false;

        if (editId !== null) {
            const id = editId;
            const req = await fetch(`/user/update-address`, {
                method: 'PATCH',
                body: new URLSearchParams({id, ...data})
            })
            
            if (!req.ok) {
                alert_error("Network error. Try again");
                return false;
            }
            const res = await req.json();
            if (res.success) {
                alert_success_without_reload(res.message);
                fetch_checkout_data();
            } else {
                alert_error(res.message);
            }
        } else {
            const req = await fetch("/user/add-address", {
                method: 'POST',
                body: new URLSearchParams(data)
            })

            if (!req.ok) {
                alert_error("An error occured. Try again");
                return false;
            }

            const res = await req.json();
            if (res.success) {
                alert_success(res.message);
            } else {
                alert_error(res.message);
            }
        }

        address_form.style.display = 'none';
        Array.from(address_form.elements).forEach((input) => {
            if (input.value && input.name) {
                input.value = '';
            }
        })
        editId = null;

        return false;
    });

    const cancel_edit = () => {
        address_form.style.display = 'none';
        Array.from(address_form.elements).forEach((input) => {
            if (input.value && input.name) {
                input.value = '';
            }
        })
        editId = null;
    };

    const apply_coupon = async () => {
        const coupon_code = document.getElementById('coupon-code');
        if (!handleValidation(coupon_code)) return;
        
        const req = await fetch(`/user/apply-coupon`, {
            method: 'POST',
            body: new URLSearchParams({ coupon_code: coupon_code.value,  min_amount: total_price})
        });
        if (!req.ok) {
            alert_error("An error occured. Try again");
            return;
        }
        const res = await req.json();
        if (res.success) {
            alert_success_without_reload(res.message);
            fetch_checkout_data();
        } else {
            alert_error(res.message);
        }
    };

    const remove_coupon = async () => {
        const coupon_code = document.getElementById('coupon-code');
        if (!handleValidation(coupon_code)) return;

        const req = await fetch(`/user/remove-coupon`, {
            method: 'POST',
            body: new URLSearchParams({ coupon_code: coupon_code.value})
        });
        if (!req.ok) {
            alert_error("An error occured. Try again");
            return;
        }
        const res = await req.json();
        if (res.success) {
            alert_success_without_reload(res.message);
            fetch_checkout_data();
        } else {
            alert_error(res.message);
        }
    };

    const razorpay_payment = async () => {
        try {
            let price = document.getElementById("price").value;
            const response = await fetch('/payment/razorpay/order', { 
                method: 'POST',
                body: new URLSearchParams({
                    amount: price,
                })
            });
            const orderData = await response.json();

            const options = {
                key: orderData.order.key, 
                amount: orderData.order.amount,
                currency: 'INR',
                name: 'APPX Store',
                description: 'Payment for your order',
                order_id: orderData.order.id,
                method: {
                    netbanking: true,
                    debit: true,
                    credit: true,
                    upi: true,
                    emi: true,
                    wallet: true,
                },
                handler: async function (response) {
                    console.log('Payment successful', response);
                    await place_order(orderData.order.id, "success");
                },
                theme: {
                    color: '#3399cc',
                },
            };

            const rzp = new Razorpay(options);
            rzp.open();
            rzp.on('payment.failed', async function (response){
                await place_order(orderData.order.id, "failed");
            })
        } catch (error) {
            console.error('Error initializing Razorpay:', error);
        }
    };

    const place_order = async (razorpay_order_id, status) => {
        if (!phone) {
            Swal.fire({
                icon: 'error',
                title: 'Missing Phone Number',
                text: 'Please add a phone number to place an order.',
                confirmButtonText: 'Go to Account',
            }).then(() => {
                window.location.href = "/user/account";
            });

            return;
        }
        let carts = product_in_cart;
        if (carts.length <= 0) {
            alert_error("No products in cart");
            return;
        }

        let price = document.getElementById("price").value;
        let payment_element = document.querySelectorAll("input[name=payment]");
        const coupon_discount = document.getElementById("coupon-discount");
        let payment_method = null;
        let coupon_price;
        payment_element.forEach((pay_element) => {
            if (pay_element.checked) {
                payment_method = pay_element.value;
            }
        });

        if (payment_method == "cod" && price > 1000) {
            return alert_warning("Payment using cash on delivery is not available for orders above ₹ 1000");
        }

        let address_element = document.querySelectorAll("input[name=address]");
        let address = null;
        address_element.forEach((ad_element) => {
            if (ad_element.checked) {
                address = ad_element.value;
            }
        });
        if (!payment_method ||!address) {
            alert_error("Please select payment method and address");
            return;
        }

        if (payment_method == "razorpay" && razorpay_order_id == "") {
            return razorpay_payment();
        }

        if (coupon_discount) {
            coupon_price = coupon_discount.getAttribute("value");
        }
        const req = await fetch('/user/place-order', {
            method: 'POST',
            body: new URLSearchParams({carts: JSON.stringify(carts), payment_method, address, price, status, razorpay_order_id, coupon_discount: coupon_price})
        });
        if (!req.ok) {
            alert_error("An error occured. Try again");
            return;
        }
        const res = await req.json();
        if (res.success) {
            window.location.href = `/user/ordered/${res.order_id}`;
        } else {
            alert_error(res.message);
        }
    }

    function openModal() {
        document.getElementById("couponModal").classList.add("show");
    }

    function closeModal() {
        document.getElementById("couponModal").classList.remove("show");
    }

    async function loadCoupons() {
        try {
            const container = document.getElementById("couponsContainer");
            container.innerHTML = "";

            const req = await fetch("/user/get-all-coupons", {
                method: "POST",
                headers: {
                    "Content-Type": "application/x-www-form-urlencoded"
                },
            });

            if (!req.ok) {
                return alert_error("An error occurred while fetching coupons");
            }

            const res = await req.json();
            const coupons = Array.isArray(res.coupons) ? res.coupons : [];

            if (coupons.length === 0) {
                container.innerHTML = "<p>No coupons available.</p>";
                return;
            }

            coupons.forEach(coupon => {
                const couponElement = document.createElement("div");
                couponElement.className = "coupon";
                couponElement.innerHTML = `
                    <div>
                        <div class="coupon-code">${coupon.name}</div>
                        <div class="coupon-description">${coupon.description}</div>
                        <div class="coupon-discount" style="font-weight: 600;">${coupon.discount}% off</div>
                    </div>
                    <div>
                        <button class="copy-btn" onclick="copyCoupon('${coupon.coupon_code}')">Copy</button>
                    </div>
                `;
                container.appendChild(couponElement);
            });

        } catch (error) {
            console.error("Error loading coupons:", error);
            alert_error("An error occurred while loading coupons");
        }
    }

    function copyCoupon(code) {
        navigator.clipboard.writeText(code).then(() => {
            alert_success_without_reload(`Coupon code copied to clipboard!`);
            closeModal();
        }).catch(err => {
            alert_error("Failed to copy coupon code. Please try again.");
            console.error(err);
        });
    }

    const fetch_checkout_data = async () => {
        const req = await fetch("/user/checkout", {
            method: "POST"
        });

        const res = await req.json();
        if (res.success) {
            render_checkout(res);
            phone  = res.user.phone_number;
            total_price = res.total_price;
            user_id = res.user._id;
        }
    };

    const render_address = (user) => {
        let address_element = document.getElementById("address-list");
        address_element.innerHTML = "";
        if (user.addresses && user.addresses.length > 0) {
            user.addresses.forEach((address, index) => {
                address_element.innerHTML += `
                <div class="address-item" id="address-${index}" style="gap: 15px; justify-content: space-between;">
                    <div style="display: flex; justify-content: center; gap: 10px;">
                        <input type="radio" name="address" value="${address._id}" ${index == 0? 'checked': ''}>
                        <div class="address-content" style="max-height: 20px; overflow: hidden;">
                            <p>
                                ${address.house_address + ' ' + address.street_address}, 
                                ${address.city}, 
                                ${address.state},
                                ${address.country},  
                                <code style="font-size: 14px;">( ZIP CODE: ${address.zip_code} ) </code>
                            </p>
                        </div>
                    </div>
                    <div class="address-actions" style="align-self: flex-end;">
                        <button class="edit-btn" onclick='edit_address(${index})'>Edit</button>
                    </div>
                </div>
                <input type="hidden" value='${JSON.stringify(address)}'>
                `;
            });
        } else {
            address_element.innerHTML = "<p class='no-address'>No addresses found. Add a new address!</p>";
        }
    };

    const render_summary = (data) => {
        const element = document.getElementById("cost");
        let total_price = data.total_price;
        element.innerHTML = `
        <li><span>Subtotal:</span> <span>&#8377;${total_price}.00</span></li>
        <li><span>Shipping:</span>${total_price > 1000 ? '<span>+ &#8377;500</span>':'<span>Free</span>'}</li>
        <li><span>Tax:</span> <span>+ &#8377;3.00</span></li>
        `;
        if (data.coupon && data.user.coupon) {
            let coupon = data.coupon;
            element.innerHTML += `
            <li><span class="red" id="coupon-discount" value="${Math.ceil(total_price * (coupon.discount / 100))}">Coupon discount : </span><span class="red">- &#8377;${Math.ceil(total_price * (coupon.discount / 100))}.00</span></li>
            <hr class="divider">
            <li id="price" value="${Math.ceil((total_price + 3) - (total_price * (coupon.discount / 100))) + (total_price > 1000? 500: 0)}"><strong>Total:</strong> <strong>&#8377;${Math.ceil((total_price + 3) - (total_price * (coupon.discount / 100))) +  (total_price > 1000? 500: 0)}.00</strong></li>
            `;
        } else {
            element.innerHTML += `
            <hr class="divider">
            <li id="price" value="${total_price + 3 + (total_price > 1000? 500: 0)}"><strong>Total:</strong> <strong>&#8377;${total_price + 3 + (total_price > 1000? 500: 0)}.00</strong></li>
            `;
        }
    };

    const render_checkout = (data) => {
        render_address(data.user);
        render_summary(data);
        let cart_element = document.getElementById("in-cart");
        cart_element.innerHTML = "";
        data.carts.forEach((cart, index) => {
            product_in_cart.push(cart._id)
            cart_element.innerHTML += `<img src="/images/${cart.image}" alt="Product Image ${index}">`
        });

        let coupon_code = document.getElementById("coupon-code");
        let coupon_button = document.getElementById("coupon-button");
        if (data.coupon && data.user.coupon) {
            coupon_code.value = data.coupon.coupon_code;
            coupon_code.readOnly = true;
            coupon_button.onclick = () => remove_coupon();
            coupon_button.innerText = "Remove Coupon"
        } else {
            coupon_code.value = "";
            coupon_code.readOnly = false;
            coupon_button.onclick = () => apply_coupon();
            coupon_button.innerText = "Apply Coupon"
        }
    };

    document.addEventListener("DOMContentLoaded", () => {
        loadCoupons();
        fetch_checkout_data();
    });
</script>
<%- include('../partials/user/footer.ejs') %>
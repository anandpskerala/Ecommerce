<%- include('../partials/user/header.ejs') %>
<header>
    <%- include('../partials/user/navbar.ejs') %>
</header>
<div class="account-page">
    <%- include('../partials/user/sidebar.ejs') %>
    <main class="main-content">
        <div class="account-section">
            <h1>My Account</h1>
            <div class="row">
                <div class="col" style="max-width: 200px;">
                    <div id="avatar" class="account-avatar" onclick="change_avatar('<%= user._id %>')">
                        <% if (user.image) { %>
                            <img src="/images/<%= user.image %>" alt="<%= user.first_name %> <%= user.last_name %>">
                        <% } else { %>
                            <%= user.first_name.charAt(0).toUpperCase() %><%= user.first_name.charAt(1).toUpperCase() %>
                        <% } %>
                        <div class="profile-overlay">
                            <svg width="20" height="16" viewBox="0 0 20 16" fill="white" xmlns="http://www.w3.org/2000/svg">
                                <path d="M19 13V5C19 3.89543 18.1046 3 17 3H14.5C13.9477 3 13.5 2.55228 13.5 2C13.5 1.44772 13.0523 1 12.5 1H7.5C6.94772 1 6.5 1.44772 6.5 2C6.5 2.55228 6.05228 3 5.5 3H3C1.89543 3 1 3.89543 1 5V13C1 14.1046 1.89543 15 3 15H17C18.1046 15 19 14.1046 19 13Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                                <path d="M13 9C13 10.6569 11.6569 12 10 12C8.34315 12 7 10.6569 7 9C7 7.34315 8.34315 6 10 6C11.6569 6 13 7.34315 13 9Z" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>    
                            <span>Change Photo</span>
                        </div>
                    </div>
                    <%- user.image ? `<button class="remove-button" onclick="remove_image('${user._id}')">Remove Image</button>`: ''; %>
                </div>
                <div class="col" style="max-width: 500px;">
                    <div class="row" style="justify-content: space-between; align-items: center;">
                        <h2>Hi <%= user.first_name + " " + user.last_name %></h2>
                        <button class="btn return" onclick="edit_profile()">Edit Profile</button>
                    </div>
                    <div class="row" style="justify-content: space-between; align-items: center;">
                        <span>Email : </span>
                        <input type="text" value="<%= user.email %>" disabled>
                    </div>
                    <div class="row" style="justify-content: space-between; text-align: center; align-items: center;">
                        <span>Password : </span>
                        <% if (user.password) { %>
                            <a href="/user/change-password" class="action-button">Change Password</a>
                        <% } else { %>
                            <button class="action-button action-button-disabled" disabled>Change Password</button>
                        <% } %>
                    </div>

                    <div class="row" style="justify-content: space-between; text-align: center; align-items: center;">
                        <span>Address : </span>
                        <a href="/user/manage-address" class="action-button">Manage Address</a>
                    </div>

                    <div class="row" style="justify-content: space-between; text-align: center; align-items: center;">
                        <span>Phone : </span>
                        <button class="phone-btn" title="Phone Number" onclick="change_phone('<%= user.id %>')"><%= user.phone_number ? `${user.phone_number}  [Change]`: 'Add Phone Number' %></button>
                    </div>
                </div>
            </div>
            <div class="col" style="margin-top: 40px; max-width: 100%;">
                <div class="col" style="align-items: center;  max-width: 100%;">
                    <h3>Do you want to delete account?</h3>
                    <button class="btn cancel" onclick="delete_account()">Delete account</button>
                </div>
            </div>
        </div>
    </main>
</div>
<script>
    const change_avatar = async (id) => {
        let imageArray = [];

        function blobToFile(blob, fileName) {
            return new File([blob], fileName, { type: blob.type });
        }

        const { value: formValues } = await Swal.fire({
                title: "Change Image",
                html: `
                <form id="image-form" style="display: flex; flex-direction: column; width: 100%; align-items: center; gap: 20px;">
                    <div style="display: flex; flex-direction: column; width: 100%; align-items: center; gap:10px;">
                        <div class="file-input-container">
                            <svg width="18" height="17" viewBox="0 0 18 17" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M4.80776 16.2858H2.41216C2.09448 16.2858 1.78982 16.1595 1.56518 15.935C1.34055 15.7104 1.21436 15.4056 1.21436 15.088V5.50557M1.21436 5.50557H16.7858M1.21436 5.50557L3.8615 1.31326C3.96393 1.13567 4.11023 0.987344 4.28641 0.882483C4.46258 0.777621 4.66271 0.719731 4.86765 0.714355H13.1325C13.3374 0.719731 13.5376 0.777621 13.7138 0.882483C13.8899 0.987344 14.0362 1.13567 14.1386 1.31326L16.7858 5.50557M16.7858 5.50557V15.088C16.7858 15.4056 16.6595 15.7104 16.4349 15.935C16.2104 16.1595 15.9056 16.2858 15.588 16.2858H13.1924M6.00552 12.0935L9.00003 9.09897M9.00003 9.09897L11.9945 12.0935M9.00003 9.09897L9.00011 16.2858M9.00011 0.714355V5.50556" stroke="#5C5F6A" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
                            </svg>                            
                            <span>Choose Profile image</span>
                            <input name="images" type="file" id="image-input" class="file-input" accept="image/*" multiple">
                        </div>
                        <div id="cropper-modal" style="display: none;">
                            <div class="cropper-container">
                                <img id="cropper-image" src="" alt="Cropper">
                            </div>
                            <button class="button" id="crop-btn">Done</button>
                            <button class="button" id="cancel-btn">Cancel</button>
                        </div>
                        <div class="image-preview-container" id="image-pre-container"></div>
                    </div>
                </form>
                `,
                focusConfirm: false,
                showCancelButton: true,
                confirmButtonText: "Save",
                cancelButtonColor: 'Crimson',
                didOpen: () => {
                    let image_input = document.getElementById("image-input");
                    let cropper;
                    const MAX_FILE_SIZE = 2 * 1024 * 1024;
                    let currentFileIndex = 0;
                    let currentFiles = [];
                    const imageList = document.getElementById('image-pre-container');
                    const cropperModal = document.getElementById('cropper-modal');
                    const cropperImage = document.getElementById('cropper-image');
                    const cropButton = document.getElementById('crop-btn');
                    const cancelButton = document.getElementById('cancel-btn');
                    image_input.addEventListener('change', (e) => {
                        currentFiles = Array.from(e.target.files);
                        processNextFile();
                    });

                    function processNextFile() {
                        if (currentFileIndex >= currentFiles.length) {
                            currentFileIndex = 0;
                            return;
                        }

                        const file = currentFiles[currentFileIndex];

                        if (file.size > MAX_FILE_SIZE) {
                            alert_error(`File "${file.name}" exceeds the 2MB size limit.`);
                            currentFileIndex++;
                            processNextFile();
                            return;
                        }

                        const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
                        if (!validTypes.includes(file.type)) {
                            alert_error(`File "${file.name}" is not a valid image type.`);
                            currentFileIndex++;
                            processNextFile(); 
                            return;
                        }

                        const reader = new FileReader();
                        reader.onload = (e) => {
                            cropperImage.src = e.target.result;
                            cropperModal.style.display = 'flex';

                            cropper = new Cropper(cropperImage, {
                                aspectRatio: 1,
                                viewMode: 1,
                            });
                        };

                        reader.readAsDataURL(file);
                    }

                    cropButton.addEventListener('click', (e) => {
                        e.preventDefault();
                        const canvas = cropper.getCroppedCanvas();

                        if (!canvas) {
                            alert_error('Please crop the image properly.');
                            return;
                        }


                        canvas.toBlob((blob) => {
                            if (blob) {
                                const url = URL.createObjectURL(blob);
                                addImage(url, blob);
                            }

                            currentFileIndex++;
                            processNextFile(); 
                        });

                        cropper.destroy();
                        cropperModal.style.display = 'none';
                    });

                    cancelButton.addEventListener('click', (e) => {
                        e.preventDefault();

                        cropper.destroy();
                        cropperModal.style.display = 'none';

                        currentFileIndex++;
                        processNextFile(); 
                    });

                    function addImage(imageUrl, file) {
                        imageArray = [];
                        console.log(imageArray);
                        imageArray.push({ imageUrl, file });
                        renderImages();
                    }

                    function renderImages() {
                        imageList.innerHTML = '';
                        imageArray.forEach((imageData, index) => {
                            const imageItem = document.createElement('div');
                            imageItem.classList.add('image-item');

                            const imgElement = document.createElement('img');
                            imgElement.src = imageData.imageUrl;
                            imgElement.alt = 'Uploaded image';
                            imageItem.appendChild(imgElement);

                            const removeButton = document.createElement('button');
                            removeButton.classList.add('remove-btn');
                            removeButton.innerHTML = 'X';
                            removeButton.addEventListener('click', () => removeImage(index));
                            imageItem.appendChild(removeButton);

                            imageList.appendChild(imageItem);
                        });
                    }

                    function removeImage(index) {
                        imageArray.splice(index, 1);
                        renderImages();
                    }
                },
                preConfirm: async () => {
                    if (imageArray.length > 0) {
                        let formData = new FormData();
                        formData.append('id', id)
                        imageArray.forEach((image, index) => {
                            formData.append('image', blobToFile(image.file, image.file.name || `cropped-${index}.jpg`));
                        });

                        let req = await fetch('/user/change-profile-picture', {
                            method: 'POST',
                            body: formData
                        })

                        let res = await req.json();
                        if (res.success) {
                            alert_success(res.message);
                        } else {
                            alert_error(res.message);
                        }
                    } else {
                        alert_error("No image Found. Try again");
                    }
                }
        });
    };

    const remove_image = async (id) => {
        const req = await fetch('/user/remove-profile-image', {
            method: 'DELETE',
            body: new URLSearchParams({
                id
            })
        });

        if (!req.ok) {
            alert_error("Network error. Try again");
            return;
        }
        let res = await req.json();
        if (res.success) {
            alert_success(res.message);
        } else {
            alert_error(res.message);
        }
    }

    function validatePhoneNumber(phoneNumber) {
        const regex = /^\+?[1-9]\d{0,14}$|^(\(?\d{1,4}\)?[\s.-]?)?(\d{1,4}[\s.-]?){1,3}\d{1,4}$/;
        return regex.test(phoneNumber);
    }

    const change_phone = () => {
        Swal.fire({
            title: 'Change Phone Number',
            html: `
                <input type="tel" id="phone" name="phone" class="swal2-input" value="" placeholder="Phone Number" required>
            `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: "Save",
            cancelButtonColor: 'Crimson',
            preConfirm: async () => {
                let phone = document.getElementById('phone').value;
                if (!validatePhoneNumber(phone)) {
                    Swal.showValidationMessage('Please enter a valid phone number.');
                    return;
                }

                let req = await fetch('/user/change-phone', {
                    method: 'PATCH',
                    body: new URLSearchParams({
                        phone
                    })
                });

                if (!req.ok) {
                    alert_error("Network error. Try again");
                    return;
                }

                const res = await req.json();
                if (res.success) {
                    alert_success(res.message);
                } else {
                    alert_error(res.message);
                }
            }
        });
    };

    const delete_account = async () => {
        const request = await Swal.fire({
            title: 'Delete Account',
            text: "Are you sure you want to delete your account?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: 'Crimson',
            cancelButtonColor: 'lightgray',
            confirmButtonText: 'Yes, delete it!'
        })

        console.log(request)
        if (request.isConfirmed) {
            // const { value: password } = await Swal.fire({
            //     input: "password",
            //     inputLabel: "Confirm your password",
            //     inputPlaceholder: "Type your password here...",
            //     inputAttributes: {
            //     "aria-label": "Type your password here"
            //     },
            //     showCancelButton: true
            // });
            // if (password.trim() == "") {
            //     return alert_error("Please enter a password")
            // }
            // const p
            const req = await fetch('/user/delete-account', {
                method: 'DELETE',
            });
            if (!req.ok) {
                alert_error("An error occured. Try again");
                return;
            }

            const res = await req.json();
            if (res.success) {
                alert_success(res.message);
            } else {
                alert_error(res.message);
            }
        }
    };

    const edit_profile = async () => {
        const { value: form_values } = await Swal.fire({
            title: "Edit Name",
            html: `
            <form id="user-edit-form" style="display: flex; flex-direction: column; width: 100%; align-items: center; gap: 20px;" enctype="multipart/form-data">
                <div style="display: flex; flex-direction: column; width: 100%; align-items: center;">
                    <label for="fist_name" class="form-label">First Name</label>
                    <input id="name" name="name" class="swal2-input" value="" data-validate="required|min:2">
                </div>
                <div style="display: flex; flex-direction: column; width: 100%; align-items: center;">
                    <label for="last_name" class="form-label">Last Name</label>
                    <input id="last_name" name="last_name" class="swal2-input" value="" data-validate="required|min:2">
                </div>
            </form>
            `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: "Save",
            cancelButtonColor: 'Crimson',
            preConfirm: () => {
                let form = document.getElementById('user-edit-form');
                let res = {};
                let isValid = true;

                if (form) {
                    Array.from(form.elements).forEach((input) => {
                        if (!handleValidation(input)) {
                            isValid = false;
                        } else {
                            res[input.name] = input.value;
                        }
                    })
                }
                return isValid? res : false;
            }
        });

        if (form_values) {
            let req = await fetch("/user/change-name", {
                method: "PATCH",
                body: new URLSearchParams(form_values)
            })

            if (!req.ok) {
                alert_error("An error occured. Try again");
                return;
            }

            const res = await req.json();
            if (res.success) {
                alert_success(res.message);
            } else {
                alert_error(res.message);
            }
        }
    }
</script>
<%- include('../partials/user/footer.ejs') %>
<%- include('../partials/user/header.ejs') %>
<header>
    <%- include('../partials/user/navbar.ejs') %>
</header>
<div class="product-page">
    <div class="page-name">
        <a href="/" class="base-page">Home</a>
        <svg width="6" height="12" viewBox="0 0 6 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M5.81168 5.46731C6.06095 5.74435 6.06303 6.19578 5.81633 6.47571L0.948585 12L0.0460425 10.9967L4.46723 5.97935L0 1.01366L0.89321 0L5.81168 5.46731Z" fill="#71747E"/>
        </svg>
        <a href="/products" class="base-page">Products</a>
        <svg width="6" height="12" viewBox="0 0 6 12" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path fill-rule="evenodd" clip-rule="evenodd" d="M5.81168 5.46731C6.06095 5.74435 6.06303 6.19578 5.81633 6.47571L0.948585 12L0.0460425 10.9967L4.46723 5.97935L0 1.01366L0.89321 0L5.81168 5.46731Z" fill="#71747E"/>
        </svg>
        <p class="current"><%= title %></p>    
    </div>
    <section class="product-section">
        <div class="product-viewer">
            <div class="slideshow-container">
                <% product.images.forEach((image, index) => { %>
                    <div class="slides fade">
                        <div class="zoom-wrapper">
                            <img src="/images/<%= image %>" style="width:100%" alt="Image <%= index %>">
                        </div>
                    </div>
                <% }) %>
                <div style="text-align:center">
                    <% product.images.forEach((image, index) => { %>
                        <span class="dot" onclick="currentSlide('<%= index %>')"></span>
                    <% }) %>
                </div>
                <a class="prev" onclick="plusSlides(-1)">&#10094;</a>
                <a class="next" onclick="plusSlides(1)">&#10095;</a>
            </div>
        </div>

        <div class="product-details">
            <div class="p-row">
                <h1><%= product.title %></h1>
                <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg" class="share-btn">
                    <path d="M8.96889 13.859L15.04 17.441M15.0311 7.559L8.96889 11.141M20 6.2C20 7.69117 18.8061 8.9 17.3333 8.9C15.8606 8.9 14.6667 7.69117 14.6667 6.2C14.6667 4.70883 15.8606 3.5 17.3333 3.5C18.8061 3.5 20 4.70883 20 6.2ZM9.33333 12.5C9.33333 13.9912 8.13943 15.2 6.66667 15.2C5.19391 15.2 4 13.9912 4 12.5C4 11.0088 5.19391 9.8 6.66667 9.8C8.13943 9.8 9.33333 11.0088 9.33333 12.5ZM20 18.8C20 20.2912 18.8061 21.5 17.3333 21.5C15.8606 21.5 14.6667 20.2912 14.6667 18.8C14.6667 17.3088 15.8606 16.1 17.3333 16.1C18.8061 16.1 20 17.3088 20 18.8Z" stroke="#5C5F6A" stroke-width="1.43" stroke-linecap="round" stroke-linejoin="round"/>
                </svg>
                <div class="overlay" id="overlay"></div>

                <div class="popup" id="popup">
                    <button class="close-popup" id="closePopup">&times;</button>
                    <h3>Copy Link</h3>
                    <input type="text" id="currentUrl" readonly>
                    <button onclick="copyToClipboard()">Copy Link</button>
                    <h3>Share</h3>
                    <div class="share-icons">
                        <a href="#" title="Facebook">üåê</a>
                        <a href="#" title="X (Twitter)">‚úñ</a>
                        <a href="#" title="Pinterest">üìå</a>
                        <a href="#" title="Telegram">‚úà</a>
                        <a href="#" title="WhatsApp">üí¨</a>
                    </div>
                </div>
                <% let discount = null; %>
                <% offers.forEach((offer) => { %>
                    <% if (offer.name == product.offer) { %>
                        <% discount = offer.discount %>
                    <% } %>
                <%}); %>
                <% if (discount == null) { %>
                    <% offers.forEach((offer) => { %>
                        <% if (offer.type == "category" && category.offer != "" && offer.name == category.offer) { %>
                            <% discount = offer.discount %>
                        <% } %>
                    <% }); %>
                <% } %>

                <% if (discount == null) { %>
                    <input id="discount" type="hidden" name="discount" value="">
                <% } else { %>
                    <input id="discount" type="hidden" name="discount" value="<%= discount %>">
                <% } %>
            </div>

            <input type="hidden" name="available-variants" id="available-variants", value='<%- JSON.stringify(product.variants) %>'>
            <input type="hidden" name="available-stock" id="available-stock" value="<%- product.variants[0].colors[0].quantity %>">
            <input type="hidden" name="current-variant" id="current-variant" value="<%- product.variants[0]._id %>">
            <input type="hidden" name="current-color" id="current-color" value="<%- product.variants[0].colors[0].color %>">

            <div class="p-row-half">
                <span class="rating-element">
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 4.5L14.472 9.43691L20 10.2334L16 14.0741L16.944 19.5L12 16.9369L7.056 19.5L8 14.0741L4 10.2334L9.528 9.43691L12 4.5Z" fill="#5C5F6A"/>
                    </svg>
                    <span><%= rating ? Math.round(rating.averageRating * 10) / 10: 0 %> - <%= rating ? rating.reviewCount: 0 %> reviews</span>   
                </span>
                <span id="stock" class="stock-element" style="color: var(--red); border: 1px solid var(--red);">OUT OF STOCK</span>
                <% if (discount) { %>
                    <span class="off-element">
                        <%= discount %>% OFF
                    </span>
                <% } %>
            </div>
            <span id="stocks-left"></span>
            <span id="price" class="price <%- (discount != null && discount != 'none') ? 'strike': '' %>" data-value="<%- product.variants[0].colors[0].price %>" style="font-size: 16px; font-weight: 600; margin-bottom: 10px;">Price : &#8377;<%= currency.parse_currency(product.variants[0].colors[0].price, 0) %></span>
            <span id="discount-price" class="price" style="font-size: 16px; font-weight: 600; margin-bottom: 10px;">Discount Price : &#8377;<%= currency.parse_currency(product.variants[0].colors[0].price - Math.ceil(product.variants[0].colors[0].price * discount /100), 0) %></span>

            <span class="product-heading">Available Colors</span>
            <input type="hidden" name="colors" id="colors" value="<%= product.variants[0].colors[0]._id %>" data-value="<%= product.variants[0].colors[0].color %>">
            <div id="color-div" class="colors" style="margin-bottom: 10px;">
                <% product.variants[0].colors.forEach((color, index) => { %>
                    <%- index == 0 ? `<div class="color-option select" style="background-color: ${color.color};" title="${color.color}" data-color="${color.color}" data-value="${color._id}" onclick="selectColor(this)"></div>`: `<div class="color-option" style="background-color: ${color.color};" title="${color.color}" data-color="${color.color}" data-value="${color._id}" onclick="selectColor(this)"></div>` %>
                <% }); %>
            </div>

            <span class="product-heading">Select Variants</span>
            <div class="variants">
                <input type="hidden" id="variants" name="variants" value="<%= product.variants[0]._id %>" data-value="<%= product.variants[0].name %>">
                <% product.variants.forEach((variant, index) => { %>
                    <%- index == 0 ? `<div class="variant-option activated" title="${variant.name}" onclick="selectVariant(this)">${variant.name}</div>`: `<div class="variant-option" title="${variant.name}" onclick="selectVariant(this)">${variant.name}</div>` %>
                <% }); %>
            </div>

            <span class="product-heading">Quantity</span>
            <div class="quantity-selector">
                <div class="quantity-controls">
                  <button class="minus" aria-label="Decrease quantity" style="border-top-left-radius: 6px; border-bottom-left-radius: 6px; border-right: 1px solid #ccc;">‚àí</button>
                  <input type="number" id="quantity" value="1" min="1" max="99">
                  <button class="plus" aria-label="Increase quantity" style="border-top-right-radius: 6px; border-bottom-right-radius: 6px; border-left: 1px solid #ccc;">+</button>
                </div>
            </div>

            <div class="cart-section">
                <button onclick="add_to_cart('<%= product._id %>', '<%= JSON.stringify(session) %>')" id="cart-button" class="add-to-cart <%= (product.listed && product.stock && product.variants[0].colors[0].quantity > 0) ? '': 'add-to-cart-disabled' %>" <%= (product.listed && product.stock && product.variants[0].colors[0].quantity > 0) ? '': 'disabled' %>>Add to cart</button>
                <button class="wishlist" onclick="wishlist_button('<%= product._id %>', '<%= JSON.stringify(session) %>')">
                    <svg  class="heart-icon" width="19" height="17" viewBox="0 0 19 17" fill="<%= wishlist ? '	#ff0400': 'none' %>" xmlns="http://www.w3.org/2000/svg">
                        <path d="M9.50482 15.5L2.291 9.05129C-1.62955 5.18258 4.13333 -2.24663 9.50482 3.76384C14.8763 -2.24663 20.6141 5.20729 16.72 9.05129L9.50482 15.5Z" stroke="<%= wishlist ? '#ff0400': '#5C5F6A' %>" stroke-width="1.42857" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
            </div>
            <p class="free-shipping">‚Äî FREE SHIPPING ON ORDERS BELOW &#8377;1000</p>
        </div>
    </section>

    <section class="product-extras">
        <div class="product-side-menu">
            <ul>
                <li id="details-menu" class="side-list selected" onclick="sectionSelector('details')">
                    <svg width="16" height="3" viewBox="0 0 16 3" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2.14272 2.07145C1.82713 2.07145 1.57129 1.81561 1.57129 1.50002C1.57129 1.18443 1.82713 0.928589 2.14272 0.928589" stroke="#0E1422" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M2.14272 2.07145C2.45831 2.07145 2.71415 1.81561 2.71415 1.50002C2.71415 1.18443 2.45831 0.928589 2.14272 0.928589" stroke="#0E1422" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M7.99986 2.07145C7.68427 2.07145 7.42843 1.81561 7.42843 1.50002C7.42843 1.18443 7.68427 0.928589 7.99986 0.928589" stroke="#0E1422" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M7.99986 2.07145C8.31545 2.07145 8.57129 1.81561 8.57129 1.50002C8.57129 1.18443 8.31545 0.928589 7.99986 0.928589" stroke="#0E1422" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M13.857 2.07145C13.5414 2.07145 13.2855 1.81561 13.2855 1.50002C13.2855 1.18443 13.5414 0.928589 13.857 0.928589" stroke="#0E1422" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                        <path d="M13.857 2.07145C14.1726 2.07145 14.4284 1.81561 14.4284 1.50002C14.4284 1.18443 14.1726 0.928589 13.857 0.928589" stroke="#0E1422" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>                        
                    <span>Details</span>
                    </li>
                <li id="reviews-menu" class="side-list" onclick="sectionSelector('reviews')">
                    <svg width="24" height="25" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M12 6L14.163 10.2787L19 10.969L15.5 14.2976L16.326 19L12 16.7787L7.674 19L8.5 14.2976L5 10.969L9.837 10.2787L12 6Z" stroke="#5C5F6A" stroke-width="1.4" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>                           
                    <span>Reviews</span>
                </li>
            </ul>
        </div>
        <div id="details" class="product-menu-details">
            <div class="details-section">
                <h1 style="margin-bottom: 30px;">Details</h1>
                <% product.description.split("\n").forEach((str) => { %>
                    <p class="details"><%= str %></p>
                <% }); %>
            </div>
        </div>

        <div id="reviews" class="reviews-container" style="display: none;">
            <div class="rating-summary">
              <h1><%= rating ? Math.round(rating.averageRating * 10) / 10: 0 %></h1>
              <p><%= rating ? rating.reviewCount: 0 %> Reviews</p>
              <button class="add-to-cart" onclick="openModal('<%= JSON.stringify(session) %>')">Write a Review</button>
              <div class="modal-overlay" id="modalOverlay">
                <div class="modal">
                    <div class="modal-header">
                        <h2>Write Review</h2>
                        <button class="close-button" onclick="closeModal()">√ó</button>
                    </div>
                    <form id="review-form">
                        <input type="hidden" name="product_id" id="product_id" value="<%= product._id %>">
                        <div class="form-group">
                            <label for="comment">Review</label>
                            <textarea id="comment" name="comment" placeholder="Write your review here" required></textarea>
                        </div>
                        <div class="review-stars" id="review-rating">
                            <input type="hidden" name="rating" id="rating" value=1>
                            <span data-value="1">‚òÖ</span>
                            <span data-value="2" class="gray">‚òÖ</span>
                            <span data-value="3" class="gray">‚òÖ</span>
                            <span data-value="4" class="gray">‚òÖ</span>
                            <span data-value="5" class="gray">‚òÖ</span>
                        </div>
                        <button type="submit" class="add-to-cart">Submit Your Review</button>
                    </form>
                </div>
            </div>
            </div>
        
            <% reviews.forEach((review) => { %>
                <div class="review-item">
                    <div class="review-header">
                        <div class="review-avatar">
                            <% if (review.user_id && review.user_id.image) { %>
                                <img src="/images/<%= review.user_id.image %>" alt="<%= review.user_id.first_name +'Avatar' %>" />
                            <% } else { %>
                                <%= review.user_id.first_name.charAt(0).toUpperCase() %>
                            <% } %>
                        </div>
                        <div>
                            <span class="review-name"><%= review.user_id.first_name + ' ' + review.user_id.last_name %></span>
                            <span class="review-time"><%= time.timeAgo(review.createdAt) %></span>
                        </div>
                    </div>
                    <p class="review-text"><%= review.comment %></p>
                    <div class="stars">
                        <% for (let i = 1; i <= 5; i++) { %>
                            <% if (i <= Math.floor(review.rating)) { %>
                                ‚òÖ
                            <% } else { %>
                                ‚òÜ
                            <% } %>
                        <% } %>
                    </div>
                </div>
            <% }) %>
        
            <div class="load-more">
              <button class="review-btn">Load More Reviews</button>
            </div>
    </section>

    <div class="product-card-section">
        <% if (similar_products.length > 0 && JSON.stringify(similar_products[0]) !== '{}') { %>
        <h2 class="section-title">Related Products</h2>
        <div class="product-cards">
            <% similar_products.forEach((similar) => { %>
                <a class="product-card" href="/product/<%= similar._id %>">
                    <img src="/images/<%= similar.images[0] %>" alt="<%= similar.title %> Image" class="product-image" />
                    <h3 class="product-name"><%= similar.title %></h3>
                    <p class="product-price">&#8377;<%= similar.variants[0].colors[0].price %></p>
                    <button class="add-to-cart">Add to Cart</button>
                </a>
                <% }) %>
        </div>
        <% } %>
    </div>
</div>
<%- include('../partials/user/cart.ejs') %>
<script>
    const review_form = document.getElementById('review-form');
    const minusButton = document.querySelector('.minus');
    const plusButton = document.querySelector('.plus');
    const quantityInput = document.getElementById('quantity');
    const availableStock = document.getElementById('available-stock');


    let min = parseInt(quantityInput.min);
    let max = parseInt(availableStock.value || quantityInput.max);
    let cartMin = parseInt(quantityInput.min);

    minusButton.addEventListener('click', () => {
      let currentValue = parseInt(quantityInput.value);
      if (currentValue > min) {
        quantityInput.value = --currentValue;
      }
      updateButtons(currentValue);
    });

    plusButton.addEventListener('click', () => {
      let currentValue = parseInt(quantityInput.value);
      if (currentValue < max) {
        quantityInput.value = ++currentValue;
      }
      updateButtons(currentValue);
    });


    function updateButtons(value) {
      minusButton.disabled = value <= min;
      plusButton.disabled = value >= max;
    }

    quantityInput.max = max;
    quantityInput.addEventListener('keyup', (e) => {
        updateButtons(parseInt(e.target.value));
        if (e.target.value > max) {
            e.target.value = max;
        }
    });


    function sectionSelector(section) {
        let details = document.getElementById("details");
        let reviews = document.getElementById("reviews");
        let detailsMenu = document.getElementById("details-menu");
        let reviewsMenu = document.getElementById("reviews-menu");

        if (section == "details") {
            details.style.display = "flex";
            detailsMenu.classList.add("selected");
            reviews.style.display = "none";
            reviewsMenu.classList.remove("selected");
        } else if (section == "reviews") {
            details.style.display = "none";
            detailsMenu.classList.remove("selected");
            reviews.style.display = "block";
            reviewsMenu.classList.add("selected");
        }
    }

    const review_element = document.getElementById('rating');
    const stars = document.querySelectorAll('#review-rating span');
        stars.forEach((star, index) => {
            star.addEventListener('click', () => {
                stars.forEach((s, i) => {
                    s.classList.toggle('gray', i > index);
                    review_element.value = index + 1;
                });
            });
    });

    function clear_stars() {
        stars.forEach((star, index) => {
            if (index > 0) {
                star.classList.add('gray');
            }
        });
        review_element.value = 1;
    }

    review_form.addEventListener('submit', async (e) => {
        e.preventDefault();
        const data = Array.from(e.target.elements).reduce((acc, cur) => {
            if (cur.name && cur.value) {
                acc[cur.name] = cur.value;
            }
            return acc;
        }, {});
        
        const req = await fetch("/user/create-review", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(data),
        })
        
        if (!req.ok) {
            console.log(req)
            alert_error("An Error occured. Try again");
            return false;
        }
        
        const res = await req.json();
        if (res.success) {
            alert_success(res.message);
        } else {
            alert_error(res.message);
        }
    });

    const shareBtn = document.querySelector('.share-btn');
    const overlay = document.getElementById('overlay');
    const popup = document.getElementById('popup');
    const closePopup = document.getElementById('closePopup');

    shareBtn.addEventListener('click', () => {
        document.getElementById('currentUrl').value = window.location.href;
        overlay.style.display = 'block';
        popup.style.display = 'block';
    });

    overlay.addEventListener('click', closePopupPopup);
    closePopup.addEventListener('click', closePopupPopup);

    function closePopupPopup() {
      overlay.style.display = 'none';
      popup.style.display = 'none';
    }

    function copyToClipboard() {
      const linkInput = popup.querySelector('input');
      linkInput.select();
      linkInput.setSelectionRange(0, 99999);
      navigator.clipboard.writeText(linkInput.value);
      alert_success('Link copied to clipboard!');
    }

    function openModal(session) {
        session = JSON.parse(session);
        if (!session.user) {
            window.location.href = "/login";
            return;
        }
        document.getElementById('modalOverlay').style.display = 'flex';
    }

    function closeModal() {
        document.getElementById('modalOverlay').style.display = 'none';
        clear_stars();
    }

    function updateProductDetails(variant, color) {
        if (typeof color == "string") {
            color = JSON.parse(color);
            variant = JSON.parse(variant);
        }
        const priceElement = document.getElementById('price');
        const stockElement = document.getElementById('stock');
        const discount_element = document.getElementById('discount');
        const discountElement = document.getElementById('discount-price');

        priceElement.innerHTML = `Price : &#8377;${color.price}`;
        priceElement.dataset.value = color.price;

        console.log(discount_element.value)
        if (discount_element.value != "") {
            discountElement.style.display = "block";
            discountElement.innerHTML = `Discount Price : &#8377;${priceElement.dataset.value - Math.ceil(priceElement.dataset.value * discount_element.value / 100)}`;
        } else {
            discountElement.innerHTML = "";
            discountElement.style.display = "none";
        }

        stockElement.innerText = color.quantity > 0 ? 'In Stock' : 'Out of Stock';
        stockElement.style.color = color.quantity > 0 ? 'green' : 'red';
        stockElement.style.borderColor = color.quantity > 0 ? 'green' : 'red';
        stock_alert(color.quantity);
    }

    function selectColor(element) {
        const listed = '<%- product.listed %>';
        const variantElement = document.querySelector('#available-variants');
        if (!variantElement) {
            console.error('Variant element not found');
            return;
        }

        let variants;
        try {
            variants = JSON.parse(variantElement.value);
        } catch (error) {
            console.error('Error parsing variant data:', error);
            return;
        }

        const selectedColorId = element.dataset.value;
        if (!selectedColorId) {
            console.error('No data-value attribute found on the selected element');
            return;
        }
        let selectedColor = null;
        let parentVariant = null;

        for (const variant of variants) {
            const color = variant.colors.find(color => color._id === selectedColorId);
            if (color) {
                selectedColor = color;
                parentVariant = variant;
                break;
            }
        }

        if (!selectedColor) {
            console.warn('No matching color found for ID:', selectedColorId);
            return;
        }
        updateProductDetails(parentVariant, selectedColor);
        max = parseInt(selectedColor.quantity);
        updateButtons(1);
        const cart_button = document.getElementById("cart-button");
        if (selectedColor.quantity && selectedColor.quantity > 0 && listed == 'true') {
            cart_button.disabled = false;
            cart_button.classList.remove('add-to-cart-disabled')
        } else {
            cart_button.disabled = true;
            cart_button.classList.add('add-to-cart-disabled')
        }
        document.getElementById("current-color").value = selectedColor.color;
        document.querySelectorAll(".color-option").forEach((color_elm) => {
            color_elm.classList.remove("select");
            if (color_elm.dataset.value === selectedColor._id) {
                color_elm.classList.add("select");
            }
        })
    }

    function selectVariant(element) {
        const listed = '<%= product.listed %>';
        document.querySelectorAll('.variant-option').forEach(option => {
            option.classList.remove('activated');
        });
        element.classList.add('activated');

        let availableVariants = [];
        try {
            availableVariants = JSON.parse(document.getElementById('available-variants').value) || [];
        } catch (error) {
            console.error('Error parsing available variants:', error);
            return;
        }

        const selectedVariantName = element.title;
        const selectedVariant = availableVariants.find(variant => variant.name === selectedVariantName);

        if (!selectedVariant) {
            console.error('Selected variant not found.');
            return;
        }

        const colorContainer = document.getElementById('color-div');
        colorContainer.innerHTML = '';

        const colors = selectedVariant.colors || [];
        if (colors.length === 0) {
            const noColorsMessage = document.createElement('p');
            noColorsMessage.textContent = 'No colors available for this variant.';
            colorContainer.appendChild(noColorsMessage);
            return;
        }

        colors.forEach(color => {
            const colorDiv = document.createElement('div');
            colorDiv.className = 'color-option';
            colorDiv.style.backgroundColor = color.color || '#ccc';
            colorDiv.setAttribute('data-value', color._id || '');
            colorDiv.onclick = () => selectColor(colorDiv, selectedVariant);

            colorContainer.appendChild(colorDiv);
        });

        const firstColor = colors[0];
        const cart_button = document.getElementById("cart-button");
        if (firstColor) {
            const firstColorElement = colorContainer.firstChild;
            firstColorElement.classList.add('select');
            document.getElementById("current-color").value = firstColor.color;
            updateProductDetails(colors, firstColor);
            max = parseInt(firstColor.quantity);
            updateButtons(1);
            availableStock.value = firstColor.quantity
        } else {
            console.warn('No colors to display');
        }

        if (firstColor.quantity && firstColor.quantity > 0 && listed == 'true') {
            cart_button.disabled = false;
            cart_button.classList.remove('add-to-cart-disabled')
        } else {
            cart_button.disabled = true;
            cart_button.classList.add('add-to-cart-disabled')
        }

        const variantId = selectedVariant._id;
        document.getElementById('variants').value = variantId;
        document.getElementById('variants').setAttribute('data-value', selectedVariant.name);
    }

    const stock_alert = (quantity) => {
        const stock_element = document.getElementById("stocks-left");
        if (quantity <= 0) {
            stock_element.textContent = "";
            stock_element.style.display = "none";
        } else if (quantity > 0 && quantity < 5) {
            stock_element.textContent = `Only ${quantity} left in stock!`;
            stock_element.style.display = "flex";
        } else if (quantity >= 5 && quantity < 10) {
            stock_element.textContent = `Hurry! Only Few stocks left.`;
            stock_element.style.display = "flex";
        } else {
            stock_element.textContent = "";
            stock_element.style.display = "none";
        }
    };

    const add_to_cart = async (product_id, session) => {
        session = JSON.parse(session);
        if (!session.user) {
            window.location.href = "/login";
            return;
        }
        const data = {
            product_id: product_id,
            variant_id: document.getElementById('variants').value,
            quantity: parseInt(document.getElementById('quantity').value),
            color: document.getElementById('current-color').value,
        };
        const req = await fetch("/user/add-to-cart", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(data),
        })

        if (!req.ok) {
            alert_error("An Error occured. Try again");
            return false;
        }
        
        const res = await req.json();
        if (res.success) {
            localStorage.setItem("callOpenCartMenu", "true");
            window.location.reload();
        } else {
            alert_error(res.message);
        }
    };

    const wishlist_button = async (product_id, session) => {
        session = JSON.parse(session);
        if (!session.user) {
            window.location.href = "/login";
            return;
        }
        const data = {
            product_id: product_id,
            variant_id: document.getElementById('variants').value,
            color: document.getElementById('current-color').value,
        };
        const req = await fetch("/user/update-wishlist", {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: new URLSearchParams(data),
        })

        if (!req.ok) {
            console.log(req)
            alert_error("An Error occured. Try again");
            return false;
        }
        
        const res = await req.json();
        if (res.success) {
            alert_success(res.message);
        } else {
            alert_error(res.message);
        }
    };

    window.addEventListener("load", () => {
        const call_open_cart_menu = localStorage.getItem("callOpenCartMenu");
        if (call_open_cart_menu) {
            open_cart_menu('<%- JSON.stringify(session) %>');
            localStorage.removeItem("callOpenCartMenu");
        }
    });

    updateProductDetails('<%- JSON.stringify(product.variants[0]) %>', '<%- JSON.stringify(product.variants[0].colors[0]) %>');
    updateButtons(parseInt(quantityInput.value));

</script>
<script type="text/javascript" src="/js/carousal.js"></script>
<%- include('../partials/user/footer.ejs') %>